{"version":3,"sources":["turbopack:///[project]/src/app/admin/daily-revenue-report/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Download, Calendar, TrendingUp, Search, Filter } from 'lucide-react';\nimport SuperAdminLayout, { Card, Table, TableHeader, TableHeaderCell, TableBody, TableRow, TableCell, Button, Pagination } from '@/components/SuperAdminLayout';\n\ninterface RevenueData {\n  sno?: number;\n  date: string;\n  cro: string;\n  patientId?: string;\n  patient_id?: string;\n  examination_id?: string;\n  patient_name: string;\n  patientName?: string;\n  age: string;\n  gender: string;\n  scanNames?: string[];\n  scan_names?: string;\n  scan_type?: string;\n  totalScans?: number;\n  total_scan: number;\n  amount: number;\n  category: string;\n  mobile?: string;\n  doctor?: string;\n  doctor_name?: string;\n  hospitalName?: string;\n  hospital_name?: string;\n}\n\ninterface TableData {\n  hospitalName: string;\n  category: string;\n  date: string;\n  scanColumns?: number;\n  patients?: RevenueData[];\n  summaryRows?: SummaryRow[];\n  totals: {\n    totalScans: number;\n    totalAmount: number;\n    totalPatients?: number;\n  };\n}\n\ninterface SummaryRow {\n  scanNames: string[];\n  scanCode: string;\n  numberOfScans: number;\n  patientCount: number;\n  rate: number;\n  amount: number;\n}\n\nexport default function DailyRevenueReport() {\n  const [revenueData, setRevenueData] = useState<TableData[]>([]);\n  const [filteredData, setFilteredData] = useState<RevenueData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [itemsPerPage] = useState(10);\n  const [searchTerm, setSearchTerm] = useState('');\n  \n  const getTodayDate = () => {\n    const today = new Date();\n    const dd = String(today.getDate()).padStart(2, '0');\n    const mm = String(today.getMonth() + 1).padStart(2, '0');\n    const yyyy = today.getFullYear();\n    return `${dd}-${mm}-${yyyy}`;\n  };\n  \n  const [selectedDate, setSelectedDate] = useState(getTodayDate());\n  const [reportType, setReportType] = useState('D'); // D = Detail, S = Summary\n\n  useEffect(() => {\n    fetchRevenueData();\n  }, [selectedDate, reportType]);\n\n  const fetchRevenueData = async () => {\n    setLoading(true);\n    try {\n      const params = new URLSearchParams({\n        date: selectedDate,\n        type: reportType\n      });\n      \n      const response = await fetch(`https://varahasdc.co.in/api/admin/daily-revenue-report?${params}`);\n      if (response.ok) {\n        const data = await response.json();\n        setRevenueData(data.data || []);\n      }\n    } catch (error) {\n      console.error('Error fetching revenue data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    const allPatients: RevenueData[] = [];\n    if (Array.isArray(revenueData)) {\n      revenueData.forEach((table: TableData) => {\n        if (reportType === 'D' && table.patients && Array.isArray(table.patients)) {\n          // Detail report - use patients data\n          table.patients.forEach(patient => {\n            allPatients.push({\n              ...patient,\n              hospitalName: table.hospitalName,\n              hospital_name: table.hospitalName\n            });\n          });\n        } else if (reportType === 'S' && table.summaryRows && Array.isArray(table.summaryRows)) {\n          // Summary report - convert summaryRows to display format\n          table.summaryRows.forEach((row, index) => {\n            allPatients.push({\n              sno: index + 1,\n              date: table.date,\n              cro: row.scanCode,\n              patient_name: `${table.hospitalName} - ${table.category}`,\n              patientName: `${table.hospitalName} - ${table.category}`,\n              age: row.patientCount.toString(),\n              gender: 'Summary',\n              scan_names: row.scanNames.filter(name => name !== '..').join(', '),\n              scanNames: row.scanNames.filter(name => name !== '..'),\n              total_scan: row.numberOfScans,\n              totalScans: row.numberOfScans,\n              amount: row.amount,\n              category: table.category,\n              hospitalName: table.hospitalName,\n              hospital_name: table.hospitalName,\n              mobile: '',\n              doctor: ''\n            });\n          });\n        }\n      });\n    }\n    \n    let filtered = allPatients;\n    \n    if (searchTerm) {\n      filtered = filtered.filter(item => \n        (item.patient_name || item.patientName || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n        (item.cro || '').toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n    \n    setFilteredData(filtered);\n    setCurrentPage(1);\n  }, [revenueData, searchTerm, reportType]);\n\n  const totalPages = Math.ceil(filteredData.length / itemsPerPage);\n  const startIndex = (currentPage - 1) * itemsPerPage;\n  const paginatedRevenue = filteredData.slice(startIndex, startIndex + itemsPerPage);\n\n  const handleDownloadExcel = () => {\n    if (reportType === 'S') {\n      generateSummaryExcel();\n    } else {\n      generateDetailExcel();\n    }\n  };\n\n  const generateDetailExcel = () => {\n    if (!Array.isArray(revenueData) || revenueData.length === 0) {\n      alert('No data available for export');\n      return;\n    }\n\n    let htmlContent = `<html><meta http-equiv=\"Content-Type\" content=\"text/html; charset=Windows-1252\"><body>`;\n    \n    revenueData.forEach(table => {\n      if (!table.patients || table.patients.length === 0) return;\n      \n      const maxScans = Math.max(...table.patients.map(p => p.total_scan || p.totalScans || 0));\n      const totalCols = 10 + maxScans;\n      console.log('Testing',maxScans,totalCols);\n      htmlContent += `\n        <table border=\"1\">\n          <tr><th colspan=\"${totalCols}\" style=\"background-color:#2F75B5; color:white\">VARAHA SDC : IMAGING UNDER P.P.P. MODE</th></tr>\n          <tr><th colspan=\"${totalCols}\" style=\"background-color:#2F75B5; color:white\">RAJASTHAN MEDICARE RELIEF SOCIETY, MDM HOSPITAL</th></tr>\n          <tr><th style=\"text-margin:center; background-color:#FFEA00; color:black\" colspan=\"${totalCols}\">${table.hospitalName} (${table.category}) ${selectedDate}</th></tr>\n          <tr>\n            <th style=\"background-color:#2F75B5; color:white\">S.No</th>\n            <th style=\"background-color:#2F75B5; color:white\">DATE</th>\n            <th style=\"background-color:#2F75B5; color:white\">CRO NO. / REG. NO.</th>\n            <th style=\"background-color:#2F75B5; color:white\">PATIENT ID</th>\n            <th style=\"background-color:#2F75B5; color:white\">NAME OF PATIENT</th>\n            <th style=\"background-color:#2F75B5; color:white\">AGE</th>\n            <th style=\"background-color:#2F75B5; color:white\">GENDER</th>\n      `;\n      \n      for (let i = 1; i <= maxScans; i++) {\n        htmlContent += `<th style=\"background-color:#2F75B5; color:white\">Scan Type ${i}</th>`;\n      }\n      \n      htmlContent += `\n            <th style=\"background-color:#2F75B5; color:white\">TOTAL SCAN</th>\n            <th style=\"background-color:#2F75B5; color:white\">AMOUNT</th>\n            <th style=\"background-color:#2F75B5; color:white\">CATEGORY</th>\n          </tr>\n      `;\n      \n      let totalScans = 0;\n      let totalAmount = 0;\n      \n      table.patients.forEach((patient, index) => {\n        const patientScans = patient.scanNames || (patient.scan_names || patient.scan_type || '').split(',').map(s => s.trim()).filter(s => s);\n        const age = (patient.age || '').toString().replace('ear', '');\n        const gender = (patient.gender || '').substring(0, 1);\n        const patientId = patient.patientId || patient.examination_id || patient.patient_id || '';\n        \n        htmlContent += `\n          <tr>\n            <td>${patient.sno || index + 1}</td>\n            <td>${selectedDate}</td>\n            <td>${patient.cro || ''}</td>\n            <td>${patientId}</td>\n            <td>${patient.patientName || patient.patient_name || ''}</td>\n            <td>${age}</td>\n            <td>${gender}</td>\n        `;\n        \n        // Fill scan columns with actual scan names\n        for (let i = 0; i < maxScans; i++) {\n          const scanName = patientScans[i] || '';\n          htmlContent += `<td>${scanName}</td>`;\n        }\n        \n        const patientTotalScans = parseInt(String(patient.totalScans || patient.total_scan || 0));\n        const patientAmount = parseFloat(String(patient.amount || 0));\n        \n        htmlContent += `\n            <td style='text-align:right'>${patientTotalScans}</td>\n            <td style='text-align:right'>${patientAmount.toFixed(2)}</td>\n            <td>${patient.category}</td>\n          </tr>\n        `;\n        \n        totalScans += patientTotalScans;\n        totalAmount += patientAmount;\n      });\n      \n      htmlContent += `\n        <tr>\n          <th style=\"background-color:#FFEA00; color:black\"> </th>\n          <th style=\"background-color:#FFEA00; color:black\"> </th>\n          <th style=\"background-color:#FFEA00; color:black\"> </th>\n          <th style=\"background-color:#FFEA00; color:black\"> </th>\n          <th style=\"background-color:#FFEA00; color:black\"></th>\n          <th style=\"background-color:#FFEA00; color:black\"></th>\n          <th style=\"background-color:#FFEA00; color:black\"></th>\n      `;\n      \n      for (let i = 1; i < maxScans; i++) {\n        htmlContent += `<th style=\"background-color:#FFEA00; color:black\"></th>`;\n      }\n      \n      htmlContent += `\n          <th style=\"background-color:#FFEA00; color:black\">Total </th>\n          <th style=\"background-color:#FFEA00; color:black;text-align:right\">${totalScans} </th>\n          <th style=\"background-color:#FFEA00; color:black;text-align:right\">${totalAmount.toFixed(2)}  </th>\n          <th style=\"background-color:#FFEA00; color:black\"> </th>\n        </tr>\n        </table><br><br>\n      `;\n    });\n    \n    htmlContent += '</body></html>';\n    \n    const blob = new Blob([htmlContent], { type: 'application/vnd.ms-excel' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `DAILY REVENUE REPORT-${selectedDate}.xls`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  const generateSummaryExcel = async () => {\n    if (!Array.isArray(revenueData) || revenueData.length === 0) {\n      alert('No data available for export');\n      return;\n    }\n\n    const date1 = new Date('2023-06-01');\n    const dateParts = selectedDate.split('-');\n    const date2 = new Date(`${dateParts[2]}-${dateParts[1]}-${dateParts[0]}`);\n    const diffTime = Math.abs(date2.getTime() - date1.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    const billNo = diffDays + 85;\n    const billNumber = billNo === 85 ? '85 (A)' : billNo;\n    \n    const globalMaxColumns = Math.max(...revenueData.map(table => \n      table.summaryRows ? Math.max(...table.summaryRows.map(row => row.scanCode.split('+').length)) : 0\n    ));\n    const totalCols = globalMaxColumns + 5;\n    \n    let htmlContent = `<html><meta http-equiv=\"Content-Type\" content=\"text/html; charset=Windows-1252\"><body><table border=\"1\"><tr><th colspan=\"${totalCols}\">VARAHA SDC : 256 SLICE CT SCAN</th></tr><tr><th style=\"text-margin:center;\" colspan=\"${totalCols}\">(IMAGING UNDER P.P.P MODE)</th></tr><tr><th style=\"text-margin:center;\" colspan=\"${totalCols}\">RAJASTHAN MEDICARE RELIEF SOCIETY, MDM HOSPITAL , Jodhpur</th></tr><tr><th style=\"background-color:#FFEA00; color:black;text-align:left;\" colspan=\"${totalCols}\">Bill No. :- 2023/VDC_MDM/CT${billNumber}</th></tr><tr><th style=\"text-align:center;\" colspan=\"${totalCols}\">&nbsp;</th></tr><tr><th style=\"text-align:right;\" colspan=\"${totalCols}\">RMRS, MDM Hospital, Jodhpur</th></tr><tr><th style=\"text-align:right;\" colspan=\"${totalCols}\">SUMMARY FOR THE PERIOD OF</th></tr><tr><th style=\"background-color:#FFEA00; color:black;text-align:right;\" colspan=\"${totalCols}\">${selectedDate}</th></tr>`;\n    \n    let grandTotalScans = 0;\n    let grandTotalForms = 0;\n    let grandTotalAmount = 0;\n    \n    revenueData.forEach(table => {\n      if (!table.summaryRows || table.summaryRows.length === 0) return;\n      \n      const maxScanColumns = Math.max(...table.summaryRows.map(row => row.scanCode.split('+').length));\n      \n      htmlContent += `<tr><th style=\"background-color:#FFEA00; color:black\">(${table.hospitalName} ${table.category})</th></tr>`;\n      htmlContent += '<tr>';\n      \n      for (let i = 1; i <= maxScanColumns; i++) {\n        htmlContent += `<th style=\"background-color:#2F75B5; color:white\">${i}. SCAN NAME</th>`;\n      }\n      \n      htmlContent += `<th style=\"background-color:#2F75B5; color:white\">SCAN NO. ( Scan Code)</th><th style=\"background-color:#2F75B5; color:white\">NO. OF SCAN</th><th style=\"background-color:#2F75B5; color:white\">PATIENT/ FORMS</th><th style=\"background-color:#2F75B5; color:white\">RATE</th><th style=\"background-color:#2F75B5; color:white\">AMOUNT</th></tr>`;\n      \n      let totalScans = 0;\n      let totalPatients = 0;\n      let totalAmount = 0;\n      \n      table.summaryRows.forEach(row => {\n        htmlContent += '<tr>';\n        \n        for (let i = 0; i < maxScanColumns; i++) {\n          htmlContent += `<td>${row.scanNames[i] || '..'}</td>`;\n        }\n        \n        htmlContent += `<td style=\"text-align:center\">${row.scanCode}</td><td style=\"text-align:center\">${row.numberOfScans}</td><td style=\"text-align:center\">${row.patientCount}</td><td style=\"text-align:center\">${row.rate}</td><td style=\"text-align:right\">${row.amount}</td></tr>`;\n        \n        totalScans += row.numberOfScans;\n        totalPatients += row.patientCount;\n        totalAmount += row.amount;\n      });\n      \n      htmlContent += `<tr><th style=\"background-color:#FFEA00; color:black; text-align:left\" colspan=\"${maxScanColumns}\">Total </th><th style=\"background-color:#FFEA00; color:black;text-align:center\"> </th><th style=\"background-color:#FFEA00; color:black;text-align:center\">${totalScans}</th><th style=\"background-color:#FFEA00; color:black;text-align:center\">${totalPatients}</th><th style=\"background-color:#FFEA00; color:black;text-align:center\"> </th><th style=\"background-color:#FFEA00; color:black;text-align:right\">${totalAmount.toFixed(2)}</th></tr><tr><th colspan=\"${maxScanColumns + 5}\">&nbsp;</th></tr>`;\n      \n      grandTotalScans += totalScans;\n      grandTotalForms += totalPatients;\n      grandTotalAmount += totalAmount;\n    });\n    \n    const netReceivable = parseFloat((grandTotalAmount - (grandTotalAmount * 0.25)).toFixed(2));\n    \n    // Convert amount to words (proper conversion)\n    const numberToWords = (amount: number) => {\n      const ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen', 'Seventeen', 'Eighteen', 'Nineteen'];\n      const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];\n      \n      const convertHundreds = (num: number): string => {\n        let result = '';\n        if (num >= 100) {\n          result += ones[Math.floor(num / 100)] + ' Hundred ';\n          num %= 100;\n        }\n        if (num >= 20) {\n          result += tens[Math.floor(num / 10)] + ' ';\n          num %= 10;\n        }\n        if (num > 0) {\n          result += ones[num] + ' ';\n        }\n        return result;\n      };\n      \n      if (amount === 0) return 'Zero Rupees Only';\n      \n      const rupees = Math.floor(amount);\n      const paisa = Math.round((amount - rupees) * 100);\n      \n      let result = '';\n      let tempAmount = rupees;\n      const crores = Math.floor(tempAmount / 10000000);\n      tempAmount %= 10000000;\n      const lakhs = Math.floor(tempAmount / 100000);\n      tempAmount %= 100000;\n      const thousands = Math.floor(tempAmount / 1000);\n      tempAmount %= 1000;\n      const hundreds = tempAmount;\n      \n      if (crores > 0) result += convertHundreds(crores) + 'Crore ';\n      if (lakhs > 0) result += convertHundreds(lakhs) + 'Lakh ';\n      if (thousands > 0) result += convertHundreds(thousands) + 'Thousand ';\n      if (hundreds > 0) result += convertHundreds(hundreds);\n      \n      result = result.trim();\n      if (result) result += ' Rupees';\n      else result = 'Zero Rupees';\n      \n      if (paisa > 0) {\n        result += ' And ' + convertHundreds(paisa).trim() + ' Paisa';\n      }\n      \n      return result + ' Only';\n    };\n    \n    // Fetch paid patients data from API\n    let paidPatients = 0;\n    let paidScans = 0;\n    let paidAmount = 0;\n    \n    try {\n      const paidResponse = await fetch(`https://varahasdc.co.in/api/admin/paid-patients?s_date=${selectedDate}`);\n      if (paidResponse.ok) {\n        const paidData = await paidResponse.json();\n        if (paidData.success) {\n          paidPatients = paidData.tot_patient || 0;\n          paidScans = paidData.tot_scan || 0;\n          paidAmount = parseFloat((paidData.tot_amt || 0).toFixed(2));\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching paid patients data:', error);\n    }\n    \n    htmlContent += `<tr><th style=\"background-color:#FFEA00; color:black; text-align:left\" colspan=\"${globalMaxColumns}\">NET AMOUNT</th><th style=\"background-color:#FFEA00; color:black;text-align:center\">${grandTotalScans}</th><th style=\"background-color:#FFEA00; color:black;text-align:center\">${grandTotalForms}</th><th style=\"background-color:#FFEA00; color:black;text-align:center\"> </th><th style=\"background-color:#FFEA00; color:black;text-align:right\">${grandTotalAmount.toFixed(2)}</th></tr><tr><th colspan=\"${totalCols}\">&nbsp;</th></tr><tr><th style=\"background-color:#2F75B5; color:white\" colspan=\"${totalCols}\">SUMMARY FOR THE PERIOD</th></tr><tr><td><B>PARTICULAR</td>`;\n    \n    for (let i = 1; i < globalMaxColumns; i++) {\n      htmlContent += '<td></td>';\n    }\n    \n    htmlContent += `<td style=\"text-align:center\"><B>SCAN</td><td></td><td style=\"text-align:center\"><B>AMOUNT</td></tr><tr><td>GROSS TOTAL</td>`;\n    \n    for (let i = 1; i < globalMaxColumns; i++) {\n      htmlContent += '<td></td>';\n    }\n    \n    htmlContent += `<td style=\"text-align:center\">${grandTotalScans}</td><td></td><td style=\"text-align:right\">${grandTotalAmount.toFixed(2)}</td></tr><tr><td>(-) 25% FREE SHARE OF MDM</td>`;\n    \n    for (let i = 1; i < globalMaxColumns; i++) {\n      htmlContent += '<td></td>';\n    }\n    \n    htmlContent += `<td style=\"text-align:center\">${parseFloat((grandTotalScans * 0.25).toFixed(2))}</td><td></td><td style=\"text-align:right\">${(grandTotalAmount * 0.25).toFixed(2)}</td></tr><tr><th colspan=\"${globalMaxColumns}\" style=\"background-color:#FFEA00; color:black; text-align:left\">NET RECEIVABLE</th><th style=\"background-color:#FFEA00; color:black; text-align:center\">${parseFloat((grandTotalScans - (grandTotalScans * 0.25)).toFixed(2))}</th><th style=\"background-color:#FFEA00; color:black;\"></th><th style=\"background-color:#FFEA00; color:black;text-align:right\">${netReceivable.toFixed(2)}</th></tr><tr><th colspan=\"${totalCols}\">&nbsp;</th></tr><tr><th colspan=\"${totalCols}\">&nbsp;</th></tr><tr><th colspan=\"${globalMaxColumns}\" style=\"text-align:left\"><u>RUPEES ${numberToWords(netReceivable).toUpperCase()}</u></th><th colspan=\"4\"></th></tr><tr><th colspan=\"${globalMaxColumns}\" style=\"text-align:left\">*TOTAL PAID PATIENT = ${paidPatients}, TOTAL SCAN = ${paidScans}, TOTAL AMOUNT = ${paidAmount.toFixed(2)}</th><th colspan=\"4\" style=\"text-align:right\">For : VARAHA SDC</th></tr></table></body></html>`;\n    \n    const blob = new Blob([htmlContent], { type: 'application/vnd.ms-excel' });\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `DAILY SUMMARY REPORT-${selectedDate}.xls`;\n    a.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  return (\n    <SuperAdminLayout \n      title=\"Daily Revenue Report\" \n      subtitle=\"Daily Revenue Analysis\"\n      actions={\n        <Button onClick={handleDownloadExcel} variant=\"success\" disabled={revenueData.length === 0}>\n          <Download className=\"h-4 w-4 mr-2\" />\n          Download Excel\n        </Button>\n      }\n    >\n      <div className=\"space-y-4\">\n        <Card className=\"p-4\">\n          <div className=\"flex items-center space-x-2 mb-4\">\n            <Filter className=\"h-5 w-5 text-gray-600\" />\n            <h2 className=\"text-lg font-semibold text-gray-900\">Filters & Search</h2>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-3\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Select Date</label>\n              <input\n                type=\"date\"\n                value={selectedDate.split('-').reverse().join('-')}\n                onChange={(e) => {\n                  const parts = e.target.value.split('-');\n                  const formattedDate = `${parts[2]}-${parts[1]}-${parts[0]}`;\n                  setSelectedDate(formattedDate);\n                }}\n                className=\"w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Report Type</label>\n              <div className=\"flex items-center space-x-4 mt-2\">\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"radio\"\n                    name=\"reportType\"\n                    value=\"D\"\n                    checked={reportType === 'D'}\n                    onChange={(e) => setReportType(e.target.value)}\n                    className=\"mr-2\"\n                  />\n                  <span className=\"text-sm\">Detail</span>\n                </label>\n                <label className=\"flex items-center\">\n                  <input\n                    type=\"radio\"\n                    name=\"reportType\"\n                    value=\"S\"\n                    checked={reportType === 'S'}\n                    onChange={(e) => setReportType(e.target.value)}\n                    className=\"mr-2\"\n                  />\n                  <span className=\"text-sm\">Summary</span>\n                </label>\n              </div>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">Search</label>\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-2.5 h-4 w-4 text-gray-400\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search CRO or Patient...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full pl-10 pr-3 py-2 text-sm border border-gray-300 rounded-md focus:ring-2 focus:ring-red-500 focus:border-transparent\"\n                />\n              </div>\n            </div>\n            <div className=\"flex items-end\">\n              <Button onClick={fetchRevenueData} disabled={loading} className=\"w-full\">\n                <Search className=\"h-4 w-4 mr-2\" />\n                {loading ? 'Loading...' : 'Search'}\n              </Button>\n            </div>\n          </div>\n        </Card>\n\n        <Card>\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Revenue Data</h2>\n              <span className=\"text-sm text-gray-500\">{filteredData.length} records</span>\n            </div>\n          </div>\n          \n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableHeaderCell>S.No</TableHeaderCell>\n                <TableHeaderCell>Date</TableHeaderCell>\n                <TableHeaderCell>{reportType === 'S' ? 'Scan Code' : 'CRO'}</TableHeaderCell>\n                <TableHeaderCell>{reportType === 'S' ? 'Hospital - Category' : 'Patient Name'}</TableHeaderCell>\n                <TableHeaderCell>{reportType === 'S' ? 'Patient Count' : 'Age'}</TableHeaderCell>\n                <TableHeaderCell>Gender</TableHeaderCell>\n                <TableHeaderCell>Mobile</TableHeaderCell>\n                <TableHeaderCell>Category</TableHeaderCell>\n                <TableHeaderCell>Hospital</TableHeaderCell>\n                <TableHeaderCell>Doctor</TableHeaderCell>\n                {(() => {\n                  const maxScans = Math.max(...filteredData.map(item => {\n                    if (reportType === 'S' && 'scanNames' in item && item.scanNames) {\n                      return item.scanNames.length;\n                    }\n                    return item.total_scan || item.totalScans || 0;\n                  }), 0);\n                  return Array.from({length: maxScans}, (_, i) => (\n                    <TableHeaderCell key={i}>Scan Type {i + 1}</TableHeaderCell>\n                  ));\n                })()}\n                <TableHeaderCell>Total Scan</TableHeaderCell>\n                <TableHeaderCell>Amount</TableHeaderCell>\n              </TableHeader>\n              <TableBody>\n                {loading ? (\n                  <TableRow>\n                    <TableCell className=\"text-center\" colSpan={13 + Math.max(...filteredData.map(item => {\n                      if (reportType === 'S' && 'scanNames' in item && item.scanNames) {\n                        return item.scanNames.length;\n                      }\n                      return item.total_scan || item.totalScans || 0;\n                    }), 0)}>Loading...</TableCell>\n                  </TableRow>\n                ) : !filteredData || filteredData.length === 0 ? (\n                  <TableRow>\n                    <TableCell className=\"text-center\" colSpan={13 + Math.max(...(filteredData.length > 0 ? filteredData : [{total_scan: 0}]).map(item => {\n                      if (reportType === 'S' && 'scanNames' in item && item.scanNames) {\n                        return item.scanNames.length;\n                      }\n                      return item.total_scan || 0;\n                    }), 0)}>No revenue data found</TableCell>\n                  </TableRow>\n                ) : (\n                  paginatedRevenue.map((item, index) => {\n                    const scanNames = item.scanNames || (item.scan_names ? item.scan_names.split(', ') : []) || [];\n                    return (\n                      <TableRow key={item.cro || index}>\n                        <TableCell>{startIndex + index + 1}</TableCell>\n                        <TableCell>{item.date}</TableCell>\n                        <TableCell className=\"font-medium text-red-600\">{item.cro || ''}</TableCell>\n                        <TableCell>{item.patient_name || item.patientName || ''}</TableCell>\n                        <TableCell>{item.age || ''}</TableCell>\n                        <TableCell>{item.gender || ''}</TableCell>\n                        <TableCell>{item.mobile || ''}</TableCell>\n                        <TableCell>\n                          <span className=\"px-2 py-1 text-xs rounded-full bg-blue-100 text-blue-800 font-medium\">\n                            {item.category || ''}\n                          </span>\n                        </TableCell>\n                        <TableCell>{item.hospitalName || item.hospital_name || ''}</TableCell>\n                        <TableCell>{item.doctor || item.doctor_name || ''}</TableCell>\n                        {(() => {\n                          const maxScans = Math.max(...filteredData.map(item => {\n                            if (reportType === 'S' && 'scanNames' in item && item.scanNames) {\n                              return item.scanNames.length;\n                            }\n                            return item.total_scan || item.totalScans || 0;\n                          }), 0);\n                          return Array.from({length: maxScans}, (_, i) => (\n                            <TableCell key={i}>{scanNames[i] || ''}</TableCell>\n                          ));\n                        })()}\n                        <TableCell className=\"text-center\">{item.total_scan || item.totalScans || 0}</TableCell>\n                        <TableCell className=\"font-medium text-green-600\">₹{parseFloat(String(item.amount || 0)).toFixed(2)}</TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </div>\n          \n          {totalPages > 1 && (\n            <Pagination\n              currentPage={currentPage}\n              totalPages={totalPages}\n              onPageChange={setCurrentPage}\n              totalItems={filteredData.length}\n              itemsPerPage={itemsPerPage}\n            />\n          )}\n        </Card>\n      </div>\n    </SuperAdminLayout>\n  );\n}"],"names":[],"mappings":"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"}